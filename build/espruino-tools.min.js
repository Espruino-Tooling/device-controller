/*! For license information please see espruino-tools.min.js.LICENSE.txt */
(()=>{var e={"./node_modules/espruino-ble-uart/uart.js":function(e,t){var n,o,i;"undefined"!=typeof self&&self,o=[],void 0===(i="function"==typeof(n=function(){if("undefined"!=typeof navigator){var e,t,n=[],o=[],i={name:"Web Bluetooth",description:"Bluetooth LE devices",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M17.71 7.71L12 2h-1v7.59L6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 11 14.41V22h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 5.83l1.88 1.88L13 9.59V5.83zm1.88 10.46L13 18.17v-3.76l1.88 1.88z" fill="#ffffff"/></svg>',isSupported:function(){return navigator.platform.indexOf("Win")>=0&&(navigator.userAgent.indexOf("Chrome/54")>=0||navigator.userAgent.indexOf("Chrome/55")>=0||navigator.userAgent.indexOf("Chrome/56")>=0)?"Chrome <56 in Windows has navigator.bluetooth but it's not implemented properly":window&&window.location&&"http:"==window.location.protocol&&"localhost"!=window.location.hostname?"Serving off HTTP (not HTTPS) - Web Bluetooth not enabled":!!navigator.bluetooth||(/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream?"To use Web Bluetooth on iOS you'll need the WebBLE App.\nPlease go to https://itunes.apple.com/us/app/webble/id1193531073 to download it.":"This Web Browser doesn't support Web Bluetooth.\nPlease see https://www.espruino.com/Puck.js+Quick+Start")},connect:function(t,o){var i,r,s,f="6e400001-b5a3-f393-e0a9-e50e24dcca9e",d="6e400002-b5a3-f393-e0a9-e50e24dcca9e",p="6e400003-b5a3-f393-e0a9-e50e24dcca9e",h=20,v=void 0,g=[],b=!1;return t.close=function(e){t.isOpening=!1,t.isOpen?(t.isOpen=!1,t.emit("close")):e&&e(null),v&&(v.disconnect(),v=void 0,r=void 0,s=void 0)},t.write=function(e,n){function o(){var e;if(b)setTimeout(o,50);else if(g.length){var n=g[0];c.writeProgress(n.maxLength-n.data.length,n.maxLength),n.data.length<=h?(e=n.data,n.data=void 0):(e=n.data.substr(0,h),n.data=n.data.substr(h)),t.txInProgress=!0,l(2,"Sending "+JSON.stringify(e)),r.writeValue(u(e)).then((function(){l(3,"Sent"),n.data||(g.shift(),n.callback&&n.callback()),t.txInProgress=!1,o()})).catch((function(e){l(1,"SEND ERROR: "+e),g=[],t.close()}))}else c.writeProgress()}e&&g.push({data:e,callback:n,maxLength:e.length}),t.isOpen&&!t.txInProgress&&o()},navigator.bluetooth.requestDevice({filters:[{namePrefix:"Puck.js"},{namePrefix:"Pixl.js"},{namePrefix:"MDBT42Q"},{namePrefix:"Bangle"},{namePrefix:"RuuviTag"},{namePrefix:"iTracker"},{namePrefix:"Thingy"},{namePrefix:"Espruino"},{services:[f]}],optionalServices:[f]}).then((function(e){return l(1,"Device Name:       "+e.name),l(1,"Device ID:         "+e.id),e.addEventListener("gattserverdisconnected",(function(){l(1,"Disconnected (gattserverdisconnected)"),t.close()})),e.gatt.connect()})).then((function(e){return l(1,"Connected"),v=e,e.getPrimaryService(f)})).then((function(e){return l(2,"Got service"),(i=e).getCharacteristic(p)})).then((function(e){return s=e,l(2,"RX characteristic:"+JSON.stringify(s)),s.addEventListener("characteristicvaluechanged",(function(e){var n=e.target.value;if(c.flowControl)for(var o=0;o<n.length;o++){var i=n.getUint8(o);17==i&&(l(2,"XON received => resume upload"),b=!1),19==i&&(l(2,"XOFF received => pause upload"),b=!0)}var r=a(n.buffer);l(3,"Received "+JSON.stringify(r)),t.emit("data",r)})),s.startNotifications()})).then((function(){return i.getCharacteristic(d)})).then((function(e){r=e,l(2,"TX characteristic:"+JSON.stringify(r))})).then((function(){t.txInProgress=!1,t.isOpen=!0,t.isOpening=!1,e=!1,n=[],o(t),t.emit("open"),t.write()})).catch((function(e){l(1,"ERROR: "+e),t.close()})),t}},r={name:"Web Serial",description:"USB connected devices",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M15 7v4h1v2h-3V5h2l-3-4-3 4h2v8H8v-2.07c.7-.37 1.2-1.08 1.2-1.93 0-1.21-.99-2.2-2.2-2.2-1.21 0-2.2.99-2.2 2.2 0 .85.5 1.56 1.2 1.93V13c0 1.11.89 2 2 2h3v3.05c-.71.37-1.2 1.1-1.2 1.95 0 1.22.99 2.2 2.2 2.2 1.21 0 2.2-.98 2.2-2.2 0-.85-.49-1.58-1.2-1.95V15h3c1.11 0 2-.89 2-2v-2h1V7h-4z" fill="#ffffff"/></svg>',isSupported:function(){return navigator.serial?!window||!window.location||"http:"!=window.location.protocol||"localhost"==window.location.hostname||"Serving off HTTP (not HTTPS) - Web Serial not enabled":"No navigator.serial - Web Serial not enabled"},connect:function(e,t){var n;function o(){e.isOpening=!1,e.isOpen&&(l(1,"Disconnected"),e.isOpen=!1,e.emit("close"))}return navigator.serial.requestPort({}).then((function(e){return l(1,"Connecting to serial port"),n=e,e.open({baudrate:115200})})).then((function(){function i(){var t=n.readable.getReader();t.read().then((function({value:n,done:r}){if(t.releaseLock(),n){var c=a(n.buffer);l(3,"Received "+JSON.stringify(c)),e.emit("data",c)}r?o():i()}))}i(),l(1,"Serial connected. Receiving data..."),e.txInProgress=!1,e.isOpen=!0,e.isOpening=!1,t(e)})).catch((function(e){l(0,"ERROR: "+e),o()})),e.close=function(e){n&&(n.close(),n=void 0),o()},e.write=function(e,t){var o=n.writable.getWriter();o.write(u(e)).then((function(){t()})).catch((function(e){l(0,"SEND ERROR: "+e),closeSerial()})),o.releaseLock()},e}};o.push(i),o.push(r);var c={debug:3,flowControl:!0,log:function(e,t){e<=this.debug&&console.log("<UART> "+t)},writeProgress:function(e,t){},connect:f,write:p,eval:h,setTime:function(e){var t=new Date,n="setTime("+t.getTime()/1e3+");";p(n+="if (E.setTimeZone) E.setTimeZone("+t.getTimezoneOffset()/-60+");\n",e)},isConnected:function(){return void 0!==t},getConnection:function(){return t},close:function(){t&&t.close()},modal:function(e){var t=document.createElement("div");t.style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;opacity:0.5;z-index:100;background:black;",t.innerHTML='<div style="position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);font-family: Sans-Serif;font-size:400%;color:white;">Click to Continue...</div>',t.onclick=function(n){e(),n.preventDefault(),document.body.removeChild(t)},document.body.appendChild(t)}};return c}function a(e){return String.fromCharCode.apply(null,new Uint8Array(e))}function u(e){for(var t=new ArrayBuffer(e.length),n=new Uint8Array(t),o=0,i=e.length;o<i;o++)n[o]=e.charCodeAt(o);return t}function s(){if(n.length){var e=n.shift();l(3,"Executing "+JSON.stringify(e)+" from queue"),"eval"==e.type?c.eval(e.expr,e.cb):"write"==e.type?c.write(e.data,e.callback,e.callbackNewline):l(1,"Unknown queue item "+JSON.stringify(e))}}function l(e,t){c.log&&c.log(e,t)}function f(e){var t={on:function(e,t){this["on"+e]=t},emit:function(e,t){this["on"+e]&&this["on"+e](t)},isOpen:!1,isOpening:!0,txInProgress:!1},n=document.createElement("div");n.style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;opacity:0.5;z-index:100;background:black;";var i=document.createElement("div");i.style="position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);font-family: Sans-Serif;z-index:101;";var r=document.createElement("div");r.innerText="SELECT A PORT...",r.style="color:#fff;background:#000;padding:8px 8px 4px 8px;font-weight:bold;",i.appendChild(r);var c=document.createElement("div");return c.style="color:#000;background:#fff;padding:4px 8px 4px 8px;",i.appendChild(c),o.forEach((function(o){var r=o.isSupported();!0!==r&&l(0,o.name+" not supported, "+r);var a=document.createElement("div");a.style="width:300px;height:60px;background:#ccc;margin:4px 0px 4px 0px;padding:0px 0px 0px 68px;cursor:pointer;",a.innerHTML='<div style="position:absolute;left:8px;width:48px;height:48px;background:#999;padding:6px;cursor:pointer;">'+o.svg+'</div><div style="font-size:150%;padding-top:8px;">'+o.name+'</div><div style="font-size:80%;color:#666">'+o.description+"</div>",a.onclick=function(r){t=o.connect(t,e),r.preventDefault(),document.body.removeChild(i),document.body.removeChild(n)},c.appendChild(a)})),document.body.appendChild(n),document.body.appendChild(i),t}function d(){var e=!1;return o.forEach((function(t){var n=t.isSupported();!0===n?e=!0:l(0,t.name+" not supported, "+n)})),e}function p(o,i,r){if(d()){if(e)return l(3,"Busy - adding write to queue"),void n.push({type:"write",data:o,callback:i,callbackNewline:r});var c;if(t&&(t.isOpen||t.isOpening))return t.txInProgress||(t.received=""),e=!0,t.write(o,a);t=f((function(n){if(!n)return t=void 0,void(i&&i(null));t.received="",t.on("data",(function(e){t.received+=e,t.hadData=!0,t.cb&&t.cb(e)})),t.on("close",(function(e){t=void 0})),e=!0,t.write(o,a)}))}function a(){r&&(t.cb=function(n){var o=t.received.indexOf("\n");if(o>=0){var r=t.received.substr(0,o);t.received=t.received.substr(o+1),t.cb=void 0,c&&clearTimeout(c),c=void 0,i&&i(r),e=!1,s()}});var n=300,o=r?100:3,a=o;c=setTimeout((function u(){c=void 0,n&&n--,a&&a--,t.hadData&&(a=o),a&&n?c=setTimeout(u,100):(t.cb=void 0,r&&l(2,"write waiting for newline timed out"),i&&i(t.received),e=!1,s(),t.received=""),t.hadData=!1}),100)}}function h(t,o){if(d())return e?(l(3,"Busy - adding eval to queue"),void n.push({type:"eval",expr:t,cb:o})):void p("eval(process.env.CONSOLE).println(JSON.stringify("+t+"))\n",(function(e){try{var t=JSON.parse(e.trim());o(t)}catch(t){l(1,"Unable to decode "+JSON.stringify(e)+", got "+t.toString()),o(null,"Unable to decode "+JSON.stringify(e)+", got "+t.toString())}}),!0)}})?n.apply(t,o):n)||(e.exports=i)},"./src/espruino-tool.ts":function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function c(e){try{u(o.next(e))}catch(e){r(e)}}function a(e){try{u(o.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}u((o=o.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,o,i,r,c={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return c.label++,{value:r[1],done:!1};case 5:c.label++,o=r[1],r=[0];continue;case 7:r=c.ops.pop(),c.trys.pop();continue;default:if(!(i=c.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){c=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){c.label=r[1];break}if(6===r[0]&&c.label<i[1]){c.label=i[1],i=r;break}if(i&&c.label<i[2]){c.label=i[2],c.ops.push(r);break}i[2]&&c.ops.pop(),c.trys.pop();continue}r=t.call(e,c)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.EspruinoTool=void 0;var r=n("./node_modules/espruino-ble-uart/uart.js"),c=n("./src/helpers/fetchHelper.ts"),a=function(){function e(){this.connected=!1,this.UART=r.default}return e.prototype.dump=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.eval("E.dumpStr()")]}))}))},e.prototype.getDeviceType=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.eval("process.env.BOARD")]}))}))},e.prototype.getBattery=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.eval("E.getBattery()")]}))}))},e.prototype.getTemperature=function(){return o(this,void 0,void 0,(function(){return i(this,(function(e){return[2,this.eval("E.getTemperature()")]}))}))},e.prototype.eval=function(e){return o(this,void 0,void 0,(function(){var t=this;return i(this,(function(n){return[2,new Promise((function(n,o){t.UART.eval(e,(function(e){n(e)}))}))]}))}))},e.prototype.connect=function(){var e,t=this;null===(e=this.UART)||void 0===e||e.write("",(function(){return t.connected=!0}))},e.prototype.disconnect=function(){var e;null===(e=this.UART)||void 0===e||e.close(),this.connected=!1},e.prototype.reset=function(){this.UART.write("reset(true);\n")},e.prototype.upload=function(e,t){return void 0===t&&(t=!1),o(this,void 0,void 0,(function(){var n,r=this;return i(this,(function(a){switch(a.label){case 0:return[4,this.getDeviceType()];case 1:return"BANGLEJS"===(n=a.sent())&&(t=!1),!1,[4,(0,c.fetchToText)(e).then((function(e){return o(r,void 0,void 0,(function(){var r=this;return i(this,(function(c){return this.dump().then((function(e){return o(r,void 0,void 0,(function(){return i(this,(function(e){return[2]}))}))})),this.reset(),t?"PIXLJS"!==n?(this.UART.write("E.setBootCode(`".concat(e,"`,true);\n")),this.UART.write("load();\n")):(this.UART.write(e),this.UART.write("save();\n"),this.UART.write("load();\n")):this.UART.write(e),[2]}))}))}))];case 2:return a.sent(),[2]}}))}))},e}();t.EspruinoTool=a},"./src/helpers/fetchHelper.ts":function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function c(e){try{u(o.next(e))}catch(e){r(e)}}function a(e){try{u(o.throw(e))}catch(e){r(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,a)}u((o=o.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,o,i,r,c={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function a(r){return function(a){return function(r){if(n)throw new TypeError("Generator is already executing.");for(;c;)try{if(n=1,o&&(i=2&r[0]?o.return:r[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,r[1])).done)return i;switch(o=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return c.label++,{value:r[1],done:!1};case 5:c.label++,o=r[1],r=[0];continue;case 7:r=c.ops.pop(),c.trys.pop();continue;default:if(!(i=c.trys,(i=i.length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){c=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){c.label=r[1];break}if(6===r[0]&&c.label<i[1]){c.label=i[1],i=r;break}if(i&&c.label<i[2]){c.label=i[2],c.ops.push(r);break}i[2]&&c.ops.pop(),c.trys.pop();continue}r=t.call(e,c)}catch(e){r=[6,e],o=0}finally{n=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.fetchToText=void 0,t.fetchToText=function(e){return n(this,void 0,void 0,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return[4,fetch(e).then((function(e){if(!e.ok)throw new Error(e.status);return e}))];case 1:if(!(t=n.sent()))throw new Error("fetch on :".concat(e," failed"));return[4,t.text()];case 2:return[2,n.sent()]}}))}))}},"./src/helpers/funcToString.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.stringifyFunction=void 0,t.stringifyFunction=function(e){return console.log(e.toString()),e.toString().split("\n").slice(1,-1).join("\n")}},"./src/puck/puck.ts":function(e,t,n){"use strict";var o,i=this&&this.__extends||(o=function(e,t){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},o(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Puck=void 0;var r=n("./src/espruino-tool.ts"),c=n("./src/helpers/funcToString.ts"),a=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.onPress=function(e){this.UART.write("reset();\n"),this.UART.write("\n    setWatch(function(){\n      ".concat((0,c.stringifyFunction)(e),';\n    }, BTN,{edge:"rising", repeat:true, debounce:50})\n  '))},t}(r.EspruinoTool);t.Puck=a}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={exports:{}};return e[o].call(r.exports,r,r.exports,n),r.exports}var o={};(()=>{"use strict";var e=o;Object.defineProperty(e,"__esModule",{value:!0}),e.Puck=void 0;var t=n("./src/espruino-tool.ts"),i=n("./src/puck/puck.ts");Object.defineProperty(e,"Puck",{enumerable:!0,get:function(){return i.Puck}}),e.default=t.EspruinoTool})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,